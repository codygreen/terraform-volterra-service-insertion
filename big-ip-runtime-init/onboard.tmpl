#!/bin/bash

# Send output to log file and serial console
mkdir -p  /var/log/cloud /config/cloud /var/config/rest/downloads
LOG_FILE=/var/log/cloud/startup-script.log
[[ ! -f $LOG_FILE ]] && touch $LOG_FILE || { echo "Run Only Once. Exiting"; exit; }
npipe=/tmp/$$.tmp
trap "rm -f $npipe" EXIT
mknod $npipe p
tee <$npipe -a $LOG_FILE /dev/ttyS0 &
exec 1>&-
exec 1>$npipe
exec 2>&1
echo "$(date +"%Y-%m-%dT%H:%M:%S.%3NZ") : Startup Script Start"

# # create user
# tmsh create auth user ${bigip_username} password ${bigip_password} shell tmsh partition-access replace-all-with { all-partitions { role admin } }

# save config
tmsh save sys config
ssh_keypair2=$(cat /home/admin/.ssh/authorized_keys)

mkdir -p /config/cloud

cat << 'EOF' > /config/cloud/runtime-init-conf.yaml
---
runtime_parameters:
  - name: HOST_NAME
    type: metadata
    metadataProvider:
      type: compute
      environment: aws
      field: hostname
EOF
if ${create_dg}
then
   cat << 'EOF' >> /config/cloud/runtime-init-conf.yaml
  - name: BIGIP1
    type: static
    value: ${bigip1}
  - name: BIGIP2
    type: static
    value: ${bigip2}
EOF
fi
cat << 'EOF' >> /config/cloud/runtime-init-conf.yaml
  - name: SELF_IP_EXTERNAL
    type: metadata
    metadataProvider:
      environment: aws
      type: network
      field: local-ipv4s
      index: 1
  - name: DEFAULT_ROUTE
    type: metadata
    metadataProvider:
      environment: aws
      type: network
      field: subnet-ipv4-cidr-block
      index: 1
  - name: REGION
    type: url
    value: http://169.254.169.254/latest/dynamic/instance-identity/document
    query: region
    headers:
      - name: Content-type
        value: json
      - name: User-Agent
        value: bigip-ve
  - name: USER_NAME
    type: static
    value: ${bigip_username}
  - name: SSH_KEYS
    type: static
EOF
echo "    value: $ssh_keypair2" >> /config/cloud/runtime-init-conf.yaml

cat << 'EOF' >> /config/cloud/runtime-init-conf.yaml
  - name: ADMIN_PASS
    type: static
    value: ${bigip_password}
EOF

# Add remaining runtime_parameters:
cat << 'EOF' >> /config/cloud/runtime-init-conf.yaml
pre_onboard_enabled:
  - name: provision_rest
    type: inline
    commands:
      - /usr/bin/setdb provision.extramb 500
      - /usr/bin/setdb restjavad.useextramb true
      - /usr/bin/setdb setup.run false
bigip_ready_enabled: []
extension_packages:
  install_operations:
    - extensionType: do
      extensionVersion: 1.21.0
      extensionHash: 4fbf99d9dd15ab9f3c639f7cc009935b659a5c00c9f4895884e971da0d3326a4
    - extensionType: as3
      extensionVersion: 3.26.0
      extensionHash: b33a96c84b77cff60249b7a53b6de29cc1e932d7d94de80cc77fb69e0b9a45a0
    - extensionType: ts
      extensionVersion: 1.18.0
      extensionHash: de4c82cafe503e65b751fcacfb2f169912ad5ce1645e13c5135dca972299174a
    - extensionType: fast
      extensionVersion: 1.7.0
      extensionHash: 9c617f5bb1bb0d08ec095ce568a6d5d2ef162e504cd183fe3540586200f9d950
extension_services:
  service_operations:
    - extensionType: do
      type: url
      value: https://raw.githubusercontent.com/f5devcentral/terraform-aws-bigip-module/master/config/onboard_do.json
    - extensionType: do
      type: inline
      value:
        schemaVersion: 1.0.0
        class: Device
        label: >-
          Quickstart 1NIC BIG-IP declaration for Declarative Onboarding with
          PAYG license
        async: true
        Common:
          class: Tenant
          My_DbVariables:
            class: DbVariables
            provision.extramb: 1000
            restjavad.useextramb: true
          My_Dns:
            class: DNS
            nameServers:
              - 169.254.169.253
          My_Ntp:
            class: NTP
            servers:
              - 169.254.169.253
            timezone: UTC
          My_Provisioning:
            class: Provision
            asm: nominal
            ltm: nominal
          My_System:
            class: System
            autoPhonehome: false
            hostname: '{{{HOST_NAME}}}'
          admin:
            class: User
            partitionAccess:
              all-partitions:
                role: admin
            password: '{{{ADMIN_PASS}}}'
            shell: bash
            userType: regular
            keys: ['{{{ SSH_KEYS }}}']
          '{{{ USER_NAME }}}':
            class: User
            partitionAccess:
              all-partitions:
                role: admin
            password: '{{{ADMIN_PASS}}}'
            shell: bash
            userType: regular
            keys: ['{{{ SSH_KEYS }}}']
          external:
            class: VLAN
            tag: 4093
            mtu: 1500
            interfaces:
              - name: '1.1'
                tagged: false
            cmpHash: dst-ip
          external-self:
            class: SelfIp
            address: "{{{ SELF_IP_EXTERNAL }}}"
            vlan: external
            allowService: default
            trafficGroup: traffic-group-local-only
          default: 
            class: Route
            gw: '{{{ DEFAULT_ROUTE }}}'
            network: default
            mtu: 1500
          configsync: 
            class: ConfigSync
            configsyncIp: '/Common/external-self/address'
EOF
if ${create_dg}
then
   cat << 'EOF' >> /config/cloud/runtime-init-conf.yaml
          asmSync:
            class: DeviceGroup
            type: sync-only
            members:
              - '{{{ BIGIP1 }}}'
              - '{{{ BIGIP2 }}}'
            owner: /Common/asmSync/members/0
            autoSync: true
            saveOnAutoSync: true
            networkFailover: false
            fullLoadOnSync: false
            asmSync: true
          trust:
            class: DeviceTrust
            localUsername: '{{{ USER_NAME }}}'
            localPassword: '{{{ ADMIN_PASS }}}'
            remoteHost: '{{{ BIGIP1 }}}'
            remoteUsername: '{{{ USER_NAME }}}'
            remotePassword: '{{{ ADMIN_PASS }}}'
    - extensionType: as3
      type: inline
      value:
        class: AS3
        action: deploy
        persist: true
        declaration:
          class: ADC
          schemaVersion: 3.0.0
          label: Sample 1
          remark: A HTTP sample application
          Tenant_1:
            class: Tenant
            Shared:
              class: Application
              template: shared
              shared_pool:
                class: Pool
                remark: Service 1 shared pool
                monitors:
                  - tcp
                members:
                  - servicePort: 80
                    addressDiscovery: fqdn
                    autoPopulate: true
                    hostname: httpbin.org
            Service_1_AZ1:
              class: Application
              template: http
              serviceMain:
                class: Service_HTTP
                remark: test
                virtualAddresses: [
                  "0.0.0.0"
                ]
                pool: /Tenant_1/Shared/shared_pool
EOF
fi

# # Download
PACKAGE_URL='https://cdn.f5.com/product/cloudsolutions/f5-bigip-runtime-init/v1.2.1/dist/f5-bigip-runtime-init-1.2.1-1.gz.run'
for i in {1..30}; do
    curl -fv --retry 1 --connect-timeout 5 -L $PACKAGE_URL -o "/var/config/rest/downloads/f5-bigip-runtime-init.gz.run" && break || sleep 10
done
# Install
bash /var/config/rest/downloads/f5-bigip-runtime-init.gz.run -- '--cloud aws'
# Run
# export F5_BIGIP_RUNTIME_INIT_LOG_LEVEL=silly
f5-bigip-runtime-init --config-file /config/cloud/runtime-init-conf.yaml
echo "$(date +"%Y-%m-%dT%H:%M:%S.%3NZ") : Startup Script Finish"